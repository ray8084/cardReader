#!/usr/bin/env python3
"""
generate2014.py - Generated hand builder for 2014 card

This file is automatically generated by load_card.py
Contains methods to build hands in memory with parameters for each hand.
"""

from typing import List, Dict, Any, Optional
import json
from hand import Hand

class Card2014:
    """Card builder for 2014 with all hand configurations."""
    
    def __init__(self):
        self.year = 2014
        self.hand_list: List[Hand] = []
        self._build_all_hands()
    
    def _build_all_hands(self):
        """Build all hands by calling section-specific methods."""
        self.generate2014()
        self.generate2468()
        self.generateLikeNumbers()
        self.generateAdditionHands()
        self.generateQuints()
        self.generateConsecutiveRun()
        self.generate13579()
        self.generateWindsDragons()
        self.generate369()
        self.generateSinglesandPairs()

        # Print summary
        total_tiles = 0
        for hand in self.hand_list:
            total_tiles += len(hand.tile_sets) * 14  # Assuming 14 tiles per hand
            print(f"{hand.id+1} count:{len(hand.tile_sets)} - {hand}")
            # Dump tile sets for hands that have them
            if len(hand.tile_sets) > 0:
                for i, tile_set in enumerate(hand.tile_sets):
                    print(f"  Set {i+1}: {tile_set}")
        print(f"Total tiles: {total_tiles}")
    
    def get_year(self) -> str:
        """Get the year as string."""
        return "2014"
    
    def add_hand(self, hand_id: int, text: str, mask: str, joker_mask: str, 
                 note: str, family: str, concealed: bool, points: int) -> Hand:
        """Add a new hand to the list and return it."""
        hand = Hand(hand_id, text, mask, joker_mask, note, family, concealed, points)
        self.hand_list.append(hand)
        return hand

    def generate2014(self):
        p0 = self.add_hand(0, "NNNN EW SSSS 2014", "0000 00 0000 0000", "1111 00 1111 0000", "Any 1 Suit", "2014", False, 25)
        p0.generateTileSets()
        
        p1 = self.add_hand(1, "222 000 1111 4444", "ggg ggg rrrr rrrr", "111 111 1111 1111", "Any 2 Suits", "2014", False, 25)
        p1.generateTileSets()
    
        p2 = self.add_hand(2, "FFFF 2222 0000 14", "0000 0000 0000 00", "1111 1111 1111 00", "Any 1 Suit", "2014", False, 30)
        p2.generateTileSets()
        
        p3 = self.add_hand(3, "FF 2014 1111 4444", "00 gggg rrrr 0000", "00 0000 1111 1111", "Any 3 Suits", "2014", False, 25)
        p3.generateTileSets()
        
        p4 = self.add_hand(4, "FFFF DDD 2014 DDD", "0000 ggg rrrr 000", "1111 111 0000 111", "Any 2 Dragons, 2 or 3 Suits", "2014", True, 35)
        p4.generateTileSets()

    def generate2468(self):
        p0 = self.add_hand(0, "22 44 666 888 DDDD", "00 00 000 000 0000", "00 00 111 111 1111", "", "2468", False, 25)
        p0.generateTileSets()

        p1 = self.add_hand(1, "2222 44 6666 88 88", "gggg gg gggg rr 00", "1111 00 1111 00 00", "Any 3 Suits, Pairs 8s Other 2 Suits", "2468", False, 30)
        p1.generateTileSets()

        p2 = self.add_hand(2, "22 44 444 666 8888", "gg gg rrr rrr 0000", "00 00 111 111 1111", "Any 3 Suits, Kong 8s", "2468", False, 25)
        p2.generateTileSets()

        p3 = self.add_hand(3, "222 444 6666 8888", "ggg ggg rrrr rrrr", "111 111 1111 1111", "Any 2 Suits", "2468", False, 25)
        p3.generateTileSets()

        p4 = self.add_hand(4, "222 888 DDDD DDDD", "ggg ggg rrrr 0000", "111 111 1111 1111", "Any 3 Suits", "2468", False, 25)
        p4.generateTileSets()

        p5 = self.add_hand(5, "FF 222 444 666 888", "00 000 000 000 000", "00 111 111 111 111", "", "2468", True, 30)
        p5.generateTileSets()

    def generateLikeNumbers(self):
        p0 = self.add_hand(0, "FFFF 1111 11 1111", "0000 0000 00 0000", "1111 1111 00 1111", "Any Like No.", "Like Numbers", False, 25)
        

    def generateAdditionHands(self):
        p0 = self.add_hand(0, "FFFF 4444 + 7777 = 11", "0000 0000 0000 00", "1111 1111 1111 00", "", "Addition Hands", False, 25)
        
        p1 = self.add_hand(1, "FFFF 4444 + 7777 = 11", "0000 0000 0000 00", "1111 1111 1111 00", "", "Addition Hands", False, 25)
        
        p2 = self.add_hand(2, "FFFF 5555 + 7777 = 12", "0000 0000 0000 00", "1111 1111 1111 00", "", "Addition Hands", False, 25)
        
        p3 = self.add_hand(3, "FFFF 5555 + 7777 = 12", "0000 0000 0000 00", "1111 1111 1111 00", "", "Addition Hands", False, 25)
        
        p4 = self.add_hand(4, "FFFF 6666 + 7777 = 13", "0000 0000 0000 00", "1111 1111 1111 00", "", "Addition Hands", False, 25)
        
        p5 = self.add_hand(5, "FFFF 6666 + 7777 = 13", "0000 0000 0000 00", "1111 1111 1111 00", "", "Addition Hands", False, 25)
        

    def generateQuints(self):
        p0 = self.add_hand(0, "22 333 4444 55555", "00 000 0000 00000", "00 111 1111 11111", "These Nos. Only", "Quints", False, 35)
        
        p1 = self.add_hand(1, "11111 2222 33333", "00000 0000 00000", "11111 1111 11111", "Any 3 Suits, Any 3 Consec. Nos. Kong Middle No. Only", "Quints", False, 40)
        
        p2 = self.add_hand(2, "FFFF NNNNNN 11111", "0000 000000 00000", "1111 111111 11111", "Quint Any Wind & Any No. in Any Suit (INVALID: 15 tiles)", "Quints", False, 40)
        
        p3 = self.add_hand(3, "11111 DDDD 11111", "00000 0000 00000", "11111 1111 11111", "Quint Any Like No., Kong Dragon 3rd Suit", "Quints", False, 45)
        

    def generateConsecutiveRun(self):
        p0 = self.add_hand(0, "11 22 333 444 5555", "00 00 000 000 0000", "00 00 111 111 1111", "", "Consecutive Run", False, 25)
        
        p1 = self.add_hand(1, "55 66 777 888 9999", "00 00 000 000 0000", "00 00 111 111 1111", "", "Consecutive Run", False, 25)
        
        p2 = self.add_hand(2, "111 2222 333 4444", "000 0000 000 0000", "111 1111 111 1111", "Any 2 Suits, Any 4 Consec. Nos.", "Consecutive Run", False, 25)
        
        p3 = self.add_hand(3, "1111 22 22 22 3333", "0000 00 00 00 0000", "1111 00 00 00 1111", "Any 3 Consec. Nos. Like Pairs Middle No. Only", "Consecutive Run", False, 30)
        
        p4 = self.add_hand(4, "11 22 33 4444 4444", "00 00 00 0000 0000", "00 00 00 1111 1111", "Any 3 Suits, Any 3 Consec. Prs., Like Kongs Ascending No", "Consecutive Run", False, 30)
        
        p5 = self.add_hand(5, "FFFF 1111 2222 DD", "0000 0000 0000 00", "1111 1111 1111 00", "Any 2 Consec. Nos.", "Consecutive Run", False, 25)
        
        p6 = self.add_hand(6, "11 22 111 222 3333", "00 00 000 000 0000", "00 00 111 111 1111", "Any 3 Suits, Any 3 Consec. Nos.", "Consecutive Run", False, 25)
        
        p7 = self.add_hand(7, "111 22 333 DDD DDD", "000 00 000 000 000", "111 00 111 111 111", "Any 3 Suits, Any 3 Consec. Nos.", "Consecutive Run", True, 30)
        

    def generate13579(self):
        p0 = self.add_hand(0, "11 33 555 777 9999", "00 00 000 000 0000", "00 00 111 111 1111", "", "13579", False, 25)
        
        p1 = self.add_hand(1, "111 3333 333 5555", "000 0000 000 0000", "111 1111 111 1111", "Any 2 Suits", "13579", False, 25)
        
        p2 = self.add_hand(2, "555 7777 777 9999", "000 0000 000 0000", "111 1111 111 1111", "Any 2 Suits", "13579", False, 25)
        
        p3 = self.add_hand(3, "FFFF 1111 33 5555", "0000 0000 00 0000", "1111 1111 00 1111", "", "13579", False, 25)
        
        p4 = self.add_hand(4, "FFFF 5555 77 9999", "0000 0000 00 0000", "1111 1111 00 1111", "", "13579", False, 25)
        
        p5 = self.add_hand(5, "11 33 111 333 5555", "00 00 000 000 0000", "00 00 111 111 1111", "Any 3 Suits", "13579", False, 25)
        
        p6 = self.add_hand(6, "55 77 555 777 9999", "00 00 000 000 0000", "00 00 111 111 1111", "Any 3 Suits", "13579", False, 25)
        
        p7 = self.add_hand(7, "FF 1111 9999 DDDDD", "00 0000 0000 00000", "00 1111 1111 11111", "", "13579", False, 25)
        
        p8 = self.add_hand(8, "FF 1111 9999 DDDDD", "00 0000 0000 00000", "00 1111 1111 11111", "", "13579", False, 25)
        
        p9 = self.add_hand(9, "111 3 555 555 7 999", "000 0 000 000 0 000", "111 0 111 111 0 111", "Any 2 Suits", "13579", True, 30)
        

    def generateWindsDragons(self):
        p0 = self.add_hand(0, "NNNN EEEE WWWWW SS", "0000 0000 00000 00", "1111 1111 11111 00", "(INVALID: 15 tiles)", "Winds - Dragons", False, 25)
        
        p1 = self.add_hand(1, "FFFF NNNN RR SSSS", "0000 0000 00 0000", "1111 1111 00 1111", "Red Dragon Only", "Winds - Dragons", False, 25)
        
        p2 = self.add_hand(2, "FFFF EEEE GG WWWWW", "0000 0000 00 00000", "1111 1111 00 11111", "Green Dragon Only (INVALID: 15 tiles)", "Winds - Dragons", False, 25)
        
        p3 = self.add_hand(3, "NN 11 SSS 111 1111", "00 00 000 000 0000", "00 00 111 111 1111", "Any Like Odd No.", "Winds - Dragons", True, 30)
        
        p4 = self.add_hand(4, "EE 22 WWW 222 2222", "00 00 000 000 0000", "00 00 111 111 1111", "Any Like Even No.", "Winds - Dragons", True, 30)
        
        p5 = self.add_hand(5, "FFFF DDDD DD DDDD", "0000 0000 00 0000", "1111 1111 00 1111", "Any 3 Suits", "Winds - Dragons", False, 30)
        

    def generate369(self):
        p0 = self.add_hand(0, "FF 3333 66 9999 DD", "00 0000 00 0000 00", "00 1111 00 1111 00", "", "369", False, 30)
        
        p1 = self.add_hand(1, "333 666 6666 9999", "000 000 0000 0000", "111 111 1111 1111", "Any 2 Suits", "369", False, 25)
        
        p2 = self.add_hand(2, "33 66 99 3333 3333", "00 00 00 0000 0000", "00 00 00 1111 1111", "Any 3 Suits, Like Kongs 3, 6 or 9", "369", False, 30)
        
        p3 = self.add_hand(3, "FF 3333 6666 9999", "00 0000 0000 0000", "00 1111 1111 1111", "Any 3 Suits", "369", False, 25)
        
        p4 = self.add_hand(4, "333 66 999 333 333", "000 00 000 000 000", "111 00 111 111 111", "Any 2 Suits, Like Pungs 3, 6 or 9", "369", False, 30)
        
        p5 = self.add_hand(5, "333 6 999 333 6 999", "000 0 000 000 0 000", "111 0 111 111 0 111", "Any 2 Suits", "369", True, 30)
        

    def generateSinglesandPairs(self):
        p0 = self.add_hand(0, "NN EE WW SS 11 11 11", "00 00 00 00 00 00 00", "00 00 00 00 00 00 00", "Any Like No.", "Singles and Pairs", True, 50)
        
        p1 = self.add_hand(1, "FF 11 22 33 44 55 DD", "00 00 00 00 00 00 00", "00 00 00 00 00 00 00", "Any 5 Consec. Nos.", "Singles and Pairs", True, 50)
        
        p2 = self.add_hand(2, "11 33 55 77 99 11 11", "00 00 00 00 00 00 00", "00 00 00 00 00 00 00", "Any Like Odd No. in Other 2 Suits", "Singles and Pairs", True, 50)
        
        p3 = self.add_hand(3, "FF 22 46 88 22 46 88", "00 00 00 00 00 00 00", "00 00 00 00 00 00 00", "Any 2 Suits", "Singles and Pairs", True, 50)
        
        p4 = self.add_hand(4, "FF 11 22 11 22 11 22", "00 00 00 00 00 00 00", "00 00 00 00 00 00 00", "Any 2 Consec. Nos. in 3 Suits", "Singles and Pairs", True, 50)
        
        p5 = self.add_hand(5, "336 33669 3366999", "000 00000 0000000", "000 00000 0000000", "Any 3 Suits (INVALID: 15 tiles)", "Singles and Pairs", True, 50)
        
        p6 = self.add_hand(6, "FF 2014 2014 2014", "00 0000 0000 0000", "00 0000 0000 0000", "3 Suits", "Singles and Pairs", True, 75)
    
    def tile_id_to_name(self, tile_id):
        """Convert tile ID back to readable name"""
        from tile import TILE_MAPPINGS
        for tile_name, tile_ids in TILE_MAPPINGS.items():
            if tile_id in tile_ids:
                return tile_name
        return f"T{tile_id}"
    
    def condense_tile_set(self, tile_ids):
        """Convert tile IDs to a more readable format"""
        # Count occurrences of each tile
        tile_counts = {}
        for tile_id in tile_ids:
            tile_name = self.tile_id_to_name(tile_id)
            tile_counts[tile_name] = tile_counts.get(tile_name, 0) + 1
        
        # Create readable format
        parts = []
        for tile_name, count in sorted(tile_counts.items()):
            if count == 1:
                parts.append(tile_name)
            elif count == 2:
                parts.append(f"{tile_name}{tile_name}")
            elif count == 3:
                parts.append(f"{tile_name}{tile_name}{tile_name}")
            elif count == 4:
                parts.append(f"{tile_name}{tile_name}{tile_name}{tile_name}")
            else:
                parts.append(f"{tile_name}x{count}")
        
        return " ".join(parts)
    
    def export_to_json(self, filename="card2014.json"):
        """Export the card data to a JSON file with condensed tile sets"""
        # Build the JSON structure
        json_data = {
            "year": "2014",
            "total_hands": len(self.hand_list),
            "hands": []
        }
        
        for hand in self.hand_list:
            hand_data = {
                "id": hand.id,
                "hand": hand.text,
                "colorMask": hand.mask,
                "jokerMask": hand.joker_mask,
                "note": hand.note,
                "family": hand.family,
                "points": str(hand.points),
                "concealed": hand.concealed,
                "tile_sets": []
            }
            
            # Add tile sets if they exist
            print(f"DEBUG: Hand {hand.id} ({hand.text}) has {len(hand.tile_sets)} tile sets")
            for i, tile_set in enumerate(hand.tile_sets):
                print(f"DEBUG: Adding tile set {i}: {tile_set}")
                hand_data["tile_sets"].append(tile_set)
            
            json_data["hands"].append(hand_data)
        
        # Calculate summary statistics
        valid_hands = sum(1 for hand in self.hand_list if len(hand.tile_sets) > 0)
        total_tiles = sum(len(hand.tile_sets) * 14 for hand in self.hand_list)
        
        json_data["summary"] = {
            "hands_with_valid_tiles": valid_hands,
            "hands_without_valid_tiles": len(self.hand_list) - valid_hands,
            "total_tiles_used": total_tiles,
            "families": {}
        }
        
        # Count hands by family
        for hand in self.hand_list:
            family = hand.family
            if family not in json_data["summary"]["families"]:
                json_data["summary"]["families"][family] = {
                    "total_hands": 0,
                    "valid_hands": 0,
                    "invalid_hands": 0
                }
            
            json_data["summary"]["families"][family]["total_hands"] += 1
            if len(hand.tile_sets) > 0:
                json_data["summary"]["families"][family]["valid_hands"] += 1
            else:
                json_data["summary"]["families"][family]["invalid_hands"] += 1
        
        # Write to file with tile_ids on single lines
        with open(filename, 'w', encoding='utf-8') as f:
            json_str = json.dumps(json_data, indent=2, ensure_ascii=False, separators=(',', ': '))
            
            # Replace tile arrays to be on single lines using simple string replacement
            lines = json_str.split('\n')
            result_lines = []
            i = 0
            while i < len(lines):
                line = lines[i]
                if line.strip().startswith('[') and not line.strip().startswith('[['):
                    # Found start of tile array - collect all the tile ID lines until we find the closing bracket
                    tile_lines = []
                    i += 1
                    while i < len(lines) and ']' not in lines[i]:
                        tile_lines.append(lines[i].strip().rstrip(','))
                        i += 1
                    # Skip the closing bracket line
                    if i < len(lines):
                        i += 1
                    # Create single line with all tile IDs
                    tile_ids_str = ', '.join(tile_lines)
                    # Check if this is the last tile set in the array by looking ahead
                    is_last = True
                    j = i
                    while j < len(lines):
                        if lines[j].strip().startswith('[') and not lines[j].strip().startswith('[['):
                            is_last = False
                            break
                        elif lines[j].strip() == ']':
                            break
                        j += 1
                    
                    if is_last:
                        result_lines.append(f'          [{tile_ids_str}]')
                    else:
                        result_lines.append(f'          [{tile_ids_str}],')
                else:
                    result_lines.append(line)
                    i += 1
            
            f.write('\n'.join(result_lines))
        
        print(f"JSON file '{filename}' exported successfully!")
        print(f"Total hands: {json_data['total_hands']}")
        print(f"Hands with valid tile sets: {json_data['summary']['hands_with_valid_tiles']}")
        print(f"Hands without valid tile sets: {json_data['summary']['hands_without_valid_tiles']}")
        print(f"Total tiles used: {json_data['summary']['total_tiles_used']}")
        
        print("\nFamily breakdown:")
        for family, stats in json_data["summary"]["families"].items():
            print(f"  {family}: {stats['valid_hands']}/{stats['total_hands']} valid")
        
        return json_data
    
    def print_hands_detailed(self):
        """Print detailed information about all hands"""
        print("2014 Mahjong Card - All Hands")
        print("="*60)
        
        for hand in self.hand_list:
            print(f"\n{'='*60}")
            print(f"Hand #{hand.id + 1}: {hand.text}")
            print(f"Family: {hand.family}")
            print(f"Note: {hand.note}")
            print(f"Points: {hand.points}")
            print(f"Concealed: {'Yes' if hand.concealed else 'No'}")
            print(f"Valid tile combinations: {len(hand.tile_sets)}")
            
            if len(hand.tile_sets) > 0:
                print(f"\nTile Sets:")
                for i, tile_set in enumerate(hand.tile_sets):
                    print(f"  Set {i+1}: {tile_set}")
                    # Convert to readable names
                    readable_tiles = [self.tile_id_to_name(tile_id) for tile_id in tile_set]
                    print(f"         {readable_tiles}")
            else:
                print("  No valid tile combinations found")
        
        print(f"\n{'='*60}")
        print(f"SUMMARY:")
        print(f"Total hands: {len(self.hand_list)}")
        
        # Count hands with valid tile sets
        valid_hands = sum(1 for hand in self.hand_list if len(hand.tile_sets) > 0)
        print(f"Hands with valid tile combinations: {valid_hands}")
        print(f"Hands without valid combinations: {len(self.hand_list) - valid_hands}")
        
        # Count total tiles used
        total_tiles = sum(len(hand.tile_sets) * 14 for hand in self.hand_list)
        print(f"Total tiles used: {total_tiles}")


if __name__ == "__main__":
    card = Card2014()
    print(f"Generated {len(card.hand_list)} hands for {card.get_year()}")
    
    # Example usage of new methods:
    # card.print_hands_detailed()  # Print detailed hand information
    card.export_to_json()       # Export to JSON file
